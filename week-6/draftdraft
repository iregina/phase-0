
#Your previous Plain Text content is preserved below:
# 
# # A Nested Array to Model a Bingo Board SOLO CHALLENGE
# 
# # I spent [2:43 Am] hours on this challenge.
# 
# 
# # Release 0: Pseudocode
# # Outline:
# # Create a class called "BingoBoard"
# 
# # Create a method to generate a letter ( b, i, n, g, o) and a number (1-100)
#   #create an array that contains b i n g o in string
#   #assign a random letter to a variable
#   #create an array that contains 1...100
#   #assign the random number to a variable
#   #Return a number/variable than equal a random number/letter chosen from both arrays
# 
# # Check the called column for the number called.
#   #take the variable and identify the index number of the letter in the array above
#   #run a loop that tests if the number of the variable matches the index of the array
#   #in each of the subarrays
# 
# 
# # If the number is in the column, replace with an 'x'
#   #if the number exists as that index value in the arrays replace the numebr with "x"
# 
# # Display a column to the console
#   #fill in the outline here
# 
# # Display the board to the console (prettily)
#   #fill in the outline here
# 
# # Initial Solution

=begin

class BingoBoard

  def initialize(board) 
    @bingo_board = board
  end
 
  def call
    # reminder 1
    @letter = ["B", "I", "N", "G", "O"]
    @number = (1..100).to_a
    @selected_letter = @letter.sample
    @selected_number = @number.sample
    @selected_call = "#{@selected_letter}#{@selected_number}"
  end

  def check
    @letter_index = @letter.index(@selected_letter)
    p @letter_index
    
    # reminder 2
    @bingo_board.each { |element| 
      # reminder 3
      if element[@letter_index].each == @selected_number
        element[@letter_index].replace["X"]
        p "You got one!"
      end
    }
  end
end

=end

    
    


# Refactored Solution



#DRIVER CODE (I.E. METHOD CALLS) GO BELOW THIS LINE
=begin
board = [[47, 44, 71, 8, 88],
        [22, 69, 75, 65, 73],
        [83, 85, 97, 89, 57],
        [25, 31, 96, 68, 51],
        [75, 70, 54, 80, 83]]

new_game = BingoBoard.new(board)
p new_game.call
new_game.check
=end



# --------REGINAS ATTEMPT AGAIN------------
# This is the game board:
board = [[47, 44, 71, 8, 88],
        [22, 69, 75, 65, 73],
        [83, 85, 97, 89, 57],
        [25, 31, 96, 68, 51],
        [75, 70, 54, 80, 83]]

# This is how you play the game:

class BingoBoard

  # This is what happens when you assign something as BingoBoard.new(board)
  def initialize(board) 
    @game_piece = board
    @letter = ["B", "I", "N", "G", "O"]
    @number = (1..100).to_a
    @random_number = []
    p "Congrats, you made a bingo board!"
  end
  
  # This is the method to roll the lottery ball
  def generate_random_number
    p "The number drawn is:"
    @number_drawn = 47 #integer
    @letter_drawn = @letter.sample #string
    @random_number << @letter_drawn #insert string
    @random_number << @number_drawn #insert integer
    p @random_number.join  #string #join will change data type into string; opposite of join is split (can only split string) 
  end
  
  # This is the part that sucks:
  
  def do_i_have_this_number
    p "Let's see if you have this number."
    p "the number drawn is: #{@number_drawn}"

    #element is each row
    #inner_element is in each row
    @game_piece.each_with_index do |element, index| 
      element.each_with_index do |inner_element, inner_index|
        if inner_element == @number_drawn
          p "you got a match!"
          @game_piece[index][inner_index] = "X"
        else
          p "this number is not on your bingo board"
        end
      end
    end
  end
  
    def replace_the_matching_number
    end
    
    def run_the_game
    end
    
    def is_the_game_over
      #checks if 5 in a row or all 5 in a column is X out
    end
    

  p @game_piece
end

new_game = BingoBoard.new(board)
new_game.generate_random_number
new_game.do_i_have_this_number
  
=begin
        if inner_element == @number_drawn
          puts "you got one!"
        else
          puts "you don't have this piece"
        end
bingo = [game]
.map! {|item| item == selected_letter}.flatten!
selected_letter = B47
board[1][0] = 47


=end